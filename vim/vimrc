set encoding=utf-8
if has('win32')
    language messages en_US.utf8 
endif

" Get rid of legacy stuff
set nocompatible
set backspace=indent,eol,start

" Plugins 
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'ervandew/supertab'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'python.vim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'rhysd/vim-clang-format'
Plugin 'a.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'majutsushi/tagbar'
Plugin 'junegunn/vim-easy-align'
Plugin 'mileszs/ack.vim'
Plugin 'octol/vim-cpp-enhanced-highlight'

"Plugin 'Valloric/YouCompleteMe'
"Plugin 'tpope/vim-dispatch'
"Plugin 'bling/vim-airline'
"Plugin 'tpope/vim-fugitive'
"Plugin 'tpope/vim-surround'
"Plugin 'tpope/vim-repeat'
" SnipMate and dependencies
"Bundle 'MarcWeber/vim-addon-mw-utils'
"Bundle 'tomtom/tlib_vim'
"Bundle 'snipmate-snippets'
"Bundle 'garbas/vim-snipmate'
"Plugin 'Lokaltog/vim-powerline'

call vundle#end()            " required
filetype plugin indent on    " required

" Take me to where I was when last edited a file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Hide buffers instead of closing them
set hidden

" Turn on syntax highlight and show line numbers by default
syntax on
set nu

" Use system clipboard 
set clipboard=unnamed

" Enable mouse support
if has('mouse')
  set mouse=a
endif

" Turn off annoying beep sound
set visualbell
set noerrorbells

" NOTE: Shall think about better backup strategy
set nobackup
set noswapfile

" Moar history
set history=500
" Moar undo levels
set undolevels=500

set laststatus=2
" Permanent ruler
"set ruler
" Ruller: flags [format, encoding, type] line, col linesL
"set statusline=%50(%=%m%r%w\ %#comment#[%{&ff},\ %{strlen(&fenc)?&fenc:&enc},\ %{&ft}]%*\ %4l:%-3c\ (%P)\ %4LL%)


set showcmd
" Highlight current line
set cursorline

" Search settings
set incsearch
set ignorecase
set smartcase
set hlsearch

" Indentation settings
filetype plugin indent on
autocmd FileType text setlocal textwidth=79
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab
" ruby specific
:autocmd Filetype ruby set softtabstop=2
:autocmd Filetype ruby set shiftwidth=2
:autocmd Filetype ruby set tabstop=2

autocmd FileType cpp set keywordprg=cppman

let python_highlight_all=1

set colorcolumn=79

" Sane regexp syntax in search mode
nnoremap / /\v
vnoremap / /\v

" Remap <leader> to , key
let mapleader = ","

" Whitespace highlighting
set listchars=tab:▸\ ,eol:¬ 
autocmd filetype html,xml set listchars-=tab:▸\ ,eol:¬ 
"highlight SpecialKey guifg=#303050
" Toggle whitespace highlighting
nmap <silent> <leader>l :set list!<CR> 

" Clear highlighted search results on Return pressed in command mode
noremap <silent> <leader>/ :nohls<CR>
"nnoremap <silent> <CR> :noh<CR><CR>

" Jump over visual rows in wrapped text, not actual lines
nnoremap j gj
nnoremap k gk

" For more rapid command insertion
nnoremap ; :

" More convenient way to return to normal mode from insert mode
inoremap jj <ESC>

" Delete to the end of line
nmap D d$

" Use <tab> to jump to matching bracket
nnoremap <tab> %
vnoremap <tab> %

" Emacs
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A

" Edit and reload vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
" automatically reload vimrc when it's saved
augroup AutoReloadVimRC
  au!
  " automatically reload vimrc when it's saved
  au BufWritePost $MYVIMRC so $MYVIMRC
augroup END

" Surround word with following symbol
nmap <leader>s ysiw

vmap <C-k> :ClangFormat<cr>
nmap <C-k> :normal! v:ClangFormat<cr>

" Change working directory automatically
"set autochdir

if has("gui_running")
    " Hide the mouse when typing text
    set mousehide 

    " Get rid of toolbar
    set guioptions-=T 

    if has("gui_mac") || has("gui_macvim")
        set fuoptions=background:Normal
    endif

    if has("gui_win32") || has("gui_win32s")
        set gfn=Consolas:h10.5:cDEFAULT 
    endif
endif

set background=dark
colorscheme base16-tomorrow

" Strip whitepace in file
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map <leader>w :call StripWhitespace ()<CR>

set tags+=./tags;/
set tags+=~/tags

set complete-=i

function! Ctags ()
    exec ':!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaSl --extra=+q .'
endfunction

map <leader>n :bnext<CR>
map <leader>p :bprevious<CR>

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

set formatoptions="tcqj"

" CtrlP
let g:ctrlp_working_path_mode=0
let g:ctrlp_max_height=17
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](\.git|genfiles)$',
    \ 'file': '\v[\/]\.(exe|so|dll|obj|lib|pyc|o|d)$',
    \ }

let NERDTreeIgnore = ['\.so$', '\.so\..+$', '\.pyc$', '\.deb$']

let g:clang_format#detect_style_file=1

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_check_header = 1

let g:ycm_collect_identifiers_from_tags_files = 1

let g:ackprg = "ack -H --nocolor --nogroup --column"

if filereadable(expand("~/.vimrc.local"))
    so ~/.vimrc.local
endif
