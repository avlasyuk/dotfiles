set nocompatible

" Plugins
"=============================================================================+
filetype off " Required by Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'chriskempson/base16-vim'
Plugin 'chriskempson/vim-tomorrow-theme'
"Plugin 'ervandew/supertab'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'hdima/python-syntax' " python.vim replacement
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'

"Plugin 'rhysd/vim-clang-format'
Plugin 'avlasyuk/vim-clang-format'

Plugin 'bling/vim-airline'
Plugin 'majutsushi/tagbar'
Plugin 'junegunn/vim-easy-align'
Plugin 'mileszs/ack.vim'
Plugin 'octol/vim-cpp-enhanced-highlight'

"Plugin 'Valloric/YouCompleteMe'
Plugin 'avlasyuk/YouCompleteMe'

Plugin 'tpope/vim-git'
Plugin 'tmhedberg/matchit'
"Plugin 'Raimondi/delimitMate'

"Plugin 'a.vim'
Plugin 'avlasyuk/a.vim'

"Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'airblade/vim-gitgutter'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'regedarek/ZoomWin'
call vundle#end()
filetype plugin indent on " Required by Vundle
"-----------------------------------------------------------------------------+

" Modern defaults
"=============================================================================+
set backspace=indent,eol,start
" Turns off all error bells, visual or otherwise
" from https://github.com/Valloric/dotfiles/blob/master/vim/vimrc.vim
set noerrorbells visualbell t_vb=
syntax on
set number " Line numbers
set history=500
set undolevels=500
set hidden " Hide buffers instead of closing them
set clipboard=unnamed " Use system clipboard
set scrolloff=1 " Keep at least 1 line of context above and below the cursor
set wildmenu " Completion style in command mode
"-----------------------------------------------------------------------------+

set background=dark
colorscheme base16-tomorrow

if has("mouse")
  set mouse=a " Enable mouse support
endif

set encoding=utf-8
if has("win32")
  language messages en_US
  if has("gui_win32") || has("gui_win32s")
    set langmenu=en_US
    let $LANG="en_US"
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    " Turns of the Alt key bindings to the gui menu
    set winaltkeys=no
  endif
endif

if has("gui_running")
  " Hide the mouse when typing text
  set mousehide
  " Get rid of toolbar
  set guioptions-=T

  if has("gui_mac") || has("gui_macvim")
    set gfn=Menlo:h13
    set fuoptions=background:Normal
  endif

  if has("gui_win32") || has("gui_win32s")
    set guifont=Source_Code_Pro:h11:cANSI
  endif
endif

" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" No ESC lag
set timeoutlen=1000 ttimeoutlen=0

" Receive changes from vim-gitgutter more often (time in ms)
set updatetime=500

" Whitespace highlighting
set listchars=tab:▸\ ,trail:·
set list " Turn on

set splitbelow " Put horizontal split window below a current one
set splitright " Put vertical split to the right

set previewheight=9 " Restrict preview window height (default=12)

" NOTE: Shall think about a better backup strategy
set nobackup
set noswapfile

set showcmd
set cursorline " Highlight current line

set laststatus=2 " Status line

" Take me to where I was when last edited a file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif


" Search
"=============================================================================+
set incsearch
set ignorecase
set smartcase
set hlsearch
" Sane regexp syntax in search mode
nnoremap / /\v
vnoremap / /\v
"-----------------------------------------------------------------------------+


" Formatting
"=============================================================================+
set autoindent
set cindent

set smarttab
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

set textwidth=80
set colorcolumn=81

autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4

" Use real tabs in makefiles
autocmd FileType make
      \ set nosmarttab noexpandtab softtabstop=0 tabstop=8 shiftwidth=8

let ymapsdev = $YMAPSDEV
if ymapsdev
  autocmd FileType cpp
        \ set tabstop=4 softtabstop=4 shiftwidth=4 |
        \ set textwidth=78 colorcolumn=79
endif

command! -nargs=1 SetIndentSize set tabstop=<args> softtabstop=<args>
      \ shiftwidth=<args>
"-----------------------------------------------------------------------------+


" Key mapping
"=============================================================================+
" {
let mapleader = "\<Space>"

" Jump over visual rows in wrapped text, not actual lines
nnoremap j gj
nnoremap k gk

" More convenient way to return to normal mode from insert mode
inoremap jj <Esc>

" Jump to the begining of the line text
nnoremap <leader>H ^
" Jump to the end of line
nnoremap <leader>L $

" Delete to the end of line
nmap D d$
" Copy to the end of line
nmap Y y$

" Use <tab> to jump to matching bracket
nnoremap <Tab> %
vnoremap <Tab> %

" Emacs
inoremap <C-a> <Esc>I
inoremap <C-e> <Esc>A

" Clear highlighted search results
nnoremap <silent> <leader><Space> :nohls<CR>

" Edit vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>

" Surround word with a following symbol
nmap <leader>s ysiw
nmap <leader>S ysiW

autocmd FileType c,cpp,java,javascript
      \ vnoremap <buffer> <leader>f :ClangFormat<CR>
autocmd FileType c,cpp,java,javascript
      \ nnoremap <buffer> <leader>f :normal! v:ClangFormat<CR>

nnoremap <leader>j :YcmCompleter GoTo<CR>
nnoremap <leader>k :YcmCompleter GetType<CR>
nnoremap <leader>d :YcmCompleter GetDoc<CR>

nnoremap <leader>o <C-o>

nmap <leader>n :bnext<CR>
nmap <leader>p :bprevious<CR>

nmap <leader>tt :TagbarToggle<CR>
nmap <leader>tn :NERDTreeToggle<CR>

" Faster windows navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
" Close current window
nmap <C-x> <C-w>q
" Toogle ZoomWin zoom/restore splits
nmap <leader>z <C-w>o

nmap <leader>w :StripWhitespace<CR>

nnoremap <leader>m :CtrlPMRUFiles<CR>

autocmd FileType c,cpp,python nnoremap <buffer> <F7> :YcmDiags<CR>

" }
"-----------------------------------------------------------------------------+


" Strip whitepace in current buffer
command! StripWhitespace exec ':%s/ \+$//gc'

" Automatically reload vimrc when it's saved
augroup AutoReloadVimRC
  autocmd!
  autocmd BufWritePost $MYVIMRC so $MYVIMRC | AirlineRefresh
augroup END

set tags+=./tags;/
set tags+=~/tags

" Do not look for completion in included files as it may be slow
set complete-=i

command! CTags exec
      \ ':!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaSl --extra=+q .'

command! SpellToggle exec ':set spell!'

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" c - Auto-wrap comments using textwidth, inserting the current comment leader
"     automatically.
" r - Automatically insert the current comment leader after hitting <Enter> in
"     Insert mode.
" q - Allow formatting of comments with gq.
" j - Where it makes sense, remove a comment leader when joining lines.
set formatoptions="crqj"
" Add doxygen style comment leader
autocmd FileType c,cpp,java,javascript set comments^=:///



"-----------------------------------------------------------------------------+
" PLUGIN SETTINGS
"-----------------------------------------------------------------------------+

let NERDTreeIgnore = ['\.so$', '\.so\..+$', '\.pyc$', '\.deb$']


" A.vim
"=============================================================================+
" Custom option for avlasyuk/a.vim fork
let g:avimNoInsertModeMappings = 1

let g:alternateSearchPath =
      \ 'sfr:../source,sfr:../src,sfr:../include,sfr:../inc,sfr:include'
"-----------------------------------------------------------------------------+


" CtrlP
"=============================================================================+
let g:ctrlp_working_path_mode=0
let g:ctrlp_max_height=17
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/](\.git|genfiles)$',
      \ 'file': '\v[\/]\.(exe|so|dll|obj|lib|pyc|o|d)$',
      \ }
"-----------------------------------------------------------------------------+


" Vim-clang-format
"=============================================================================+
let g:clang_format#code_style = 'chromium'
"-----------------------------------------------------------------------------+


" Airline
"=============================================================================+
let g:airline_powerline_fonts = 1
let g:airline_theme = 'base16'
"-----------------------------------------------------------------------------+


" Syntastic
"=============================================================================+
let g:syntastic_cpp_compiler_options = '-std=c++0x'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_auto_refresh_includes = 1
let g:syntastic_cpp_include_dirs = [ '/usr/local/include' ]
let g:syntastic_python_checkers = ['pylint']
"-----------------------------------------------------------------------------+


" YouCompleteMe
"==============================================================================
let g:ycm_confirm_extra_conf = 0
let g:ycm_collect_identifiers_from_tags_files = 1
"------------------------------------------------------------------------------


" Python-syntax
"==============================================================================
let python_highlight_all=1
let python_version_2=1
"------------------------------------------------------------------------------


if filereadable(expand("~/.vimrc.local"))
  so ~/.vimrc.local
endif
